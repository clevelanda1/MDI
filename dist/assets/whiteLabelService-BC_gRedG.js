import{z as o}from"./index-8wLK5tP2.js";class m{static async getWhiteLabelSettings(){try{const{data:{session:r},error:t}=await o.auth.getSession();if(t||!(r!=null&&r.user))throw new Error("User not authenticated");const{data:e,error:a}=await o.from("white_label_settings").select("*").eq("user_id",r.user.id).maybeSingle();if(a)throw console.error("Error fetching white label settings:",a),new Error(`Failed to fetch white label settings: ${a.message}`);return e?{logoUrl:e.logo_url,brandName:e.brand_name,primaryColor:e.primary_color}:null}catch(r){throw console.error("Error in getWhiteLabelSettings:",r),new Error(r.message||"Failed to fetch white label settings")}}static async uploadLogo(r){var t;try{const{data:{session:e},error:a}=await o.auth.getSession();if(a||!(e!=null&&e.user))throw new Error("User not authenticated");if(!r||!r.type.startsWith("image/"))throw new Error("Invalid file type. Please upload an image.");const s=2*1024*1024;if(r.size>s)throw new Error("File too large. Please upload an image smaller than 2MB.");const n=((t=r.name.split(".").pop())==null?void 0:t.toLowerCase())||"jpg",u=`${e.user.id}-logo-${Date.now()}.${n}`,{data:g,error:c}=await o.storage.from("white-label-logos").upload(u,r,{cacheControl:"3600",upsert:!0});if(c)throw console.error("Error uploading logo:",c),new Error(`Failed to upload logo: ${c.message}`);const{data:i}=o.storage.from("white-label-logos").getPublicUrl(g.path);if(!(i!=null&&i.publicUrl))throw new Error("Failed to generate public URL for uploaded logo");const{data:w}=await o.from("white_label_settings").select("id").eq("user_id",e.user.id).maybeSingle();if(w){const{error:l}=await o.from("white_label_settings").update({logo_url:i.publicUrl,updated_at:new Date().toISOString()}).eq("user_id",e.user.id);if(l)throw console.error("Error updating white label settings:",l),new Error(`Failed to update white label settings: ${l.message}`)}else{const{error:l}=await o.from("white_label_settings").insert({user_id:e.user.id,logo_url:i.publicUrl});if(l)throw console.error("Error creating white label settings:",l),new Error(`Failed to create white label settings: ${l.message}`)}return i.publicUrl}catch(e){throw console.error("Error in uploadLogo:",e),new Error(e.message||"Failed to upload logo")}}static async removeLogo(){try{const{data:{session:r},error:t}=await o.auth.getSession();if(t||!(r!=null&&r.user))throw new Error("User not authenticated");const{data:e,error:a}=await o.from("white_label_settings").select("logo_url").eq("user_id",r.user.id).maybeSingle();if(a)throw console.error("Error fetching white label settings:",a),new Error(`Failed to fetch white label settings: ${a.message}`);if(e!=null&&e.logo_url){const n=e.logo_url.split("/"),u=n[n.length-1],{error:g}=await o.storage.from("white-label-logos").remove([u]);g&&console.warn("Error deleting logo from storage:",g)}const{error:s}=await o.from("white_label_settings").update({logo_url:null,updated_at:new Date().toISOString()}).eq("user_id",r.user.id);if(s)throw console.error("Error updating white label settings:",s),new Error(`Failed to update white label settings: ${s.message}`)}catch(r){throw console.error("Error in removeLogo:",r),new Error(r.message||"Failed to remove logo")}}static async getWhiteLabelSettingsForUser(r){try{const{data:t,error:e}=await o.from("white_label_settings").select("*").eq("user_id",r).maybeSingle();return e?(console.error("Error fetching white label settings for user:",e),null):t?{logoUrl:t.logo_url,brandName:t.brand_name,primaryColor:t.primary_color}:null}catch(t){return console.error("Error in getWhiteLabelSettingsForUser:",t),null}}}export{m as W};
