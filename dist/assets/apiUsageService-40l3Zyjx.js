import{z as s}from"./index-8wLK5tP2.js";class u{static async ensureAuthenticated(){try{const{data:{session:r},error:t}=await s.auth.getSession();if(t)throw console.error("Auth session error:",t),new Error("Authentication error. Please sign in again.");if(!(r!=null&&r.user))throw new Error("User not authenticated. Please sign in.");return r}catch(r){throw console.error("Error checking authentication:",r),new Error("Authentication check failed. Please sign in again.")}}static async incrementApiUsage(r){try{const i=(await this.ensureAuthenticated()).user.id,{data:e,error:o}=await s.rpc("check_api_usage_limit",{api_name:r,user_id_param:i});if(o)return console.error("Error checking API usage limit:",o),!0;if(!e)return console.warn(`User ${i} has exceeded their ${r} API usage limit`),!1;const{error:n}=await s.rpc("increment_api_usage",{api_name:r});n&&console.error("Error incrementing global API usage:",n);const{error:a}=await s.rpc("increment_combined_api_usage",{api_name:r,user_id_param:i});return a&&console.error("Error incrementing user API usage:",a),!0}catch(t){return console.error("Error in incrementApiUsage:",t),!0}}static async getUserApiUsage(){try{const t=(await this.ensureAuthenticated()).user.id,{data:i,error:e}=await s.from("combined_api_usage").select("*").eq("user_id",t).maybeSingle();if(e)throw console.error("Error fetching user API usage:",e),new Error(`Failed to fetch API usage: ${e.message}`);return i}catch(r){throw console.error("Error in getUserApiUsage:",r),new Error(r.message||"Failed to fetch API usage")}}static async getGlobalApiLimits(){try{const r=new Date().toISOString().split("T")[0],{data:t,error:i}=await s.from("amazon_api_usage").select("*").limit(1).maybeSingle();if(i)throw console.error("Error fetching Amazon API usage:",i),new Error(`Failed to fetch Amazon API usage: ${i.message}`);const{data:e,error:o}=await s.from("etsy_api_usage").select("*").limit(1).maybeSingle();if(o)throw console.error("Error fetching Etsy API usage:",o),new Error(`Failed to fetch Etsy API usage: ${o.message}`);return{amazon:{total_count:(t==null?void 0:t.total_count)||0,monthly_limit:(t==null?void 0:t.monthly_limit)||0,subscription_start_date:(t==null?void 0:t.subscription_start_date)||r,last_reset_date:(t==null?void 0:t.last_reset_date)||r},etsy:{total_count:(e==null?void 0:e.total_count)||0,monthly_limit:(e==null?void 0:e.monthly_limit)||0,subscription_start_date:(e==null?void 0:e.subscription_start_date)||r,last_reset_date:(e==null?void 0:e.last_reset_date)||r}}}catch(r){throw console.error("Error in getGlobalApiLimits:",r),new Error(r.message||"Failed to fetch global API limits")}}static async updateMonthlyLimit(r,t){var i;try{await this.ensureAuthenticated();const e=`${r}_api_usage`,{error:o}=await s.from(e).update({monthly_limit:t}).eq("id",(i=(await s.from(e).select("id").single()).data)==null?void 0:i.id);if(o)throw console.error(`Error updating ${r} monthly limit:`,o),new Error(`Failed to update ${r} monthly limit: ${o.message}`)}catch(e){throw console.error("Error in updateMonthlyLimit:",e),new Error(e.message||`Failed to update ${r} monthly limit`)}}static async checkApiUsageLimit(r){try{const i=(await this.ensureAuthenticated()).user.id,{data:e,error:o}=await s.rpc("check_api_usage_limit",{api_name:r,user_id_param:i});return o?(console.error("Error checking API usage limit:",o),!0):e}catch(t){return console.error("Error in checkApiUsageLimit:",t),!0}}}export{u as A};
