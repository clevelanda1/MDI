import{z as t,H as l}from"./index-8wLK5tP2.js";class g{static async ensureAuthenticated(){try{const{data:{session:e},error:r}=await t.auth.getSession();if(r)throw console.error("Auth session error:",r),new Error("Authentication error. Please sign in again.");if(!(e!=null&&e.user))throw new Error("User not authenticated. Please sign in.");return e}catch(e){throw console.error("Error checking authentication:",e),new Error("Authentication check failed. Please sign in again.")}}static generateShareToken(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}static async createSharedVisionBoard(e,r){var o;try{const a=await this.ensureAuthenticated(),{data:i,error:d}=await t.from("vision_boards").select("*").eq("id",e).eq("user_id",a.user.id).eq("is_saved",!0).single();if(d||!i)throw new Error("Saved vision board not found or you do not have permission to share it");const c=await l.getUserSubscription(),s=this.generateShareToken(),h=r?new Date(Date.now()+r*24*60*60*1e3).toISOString():null,{data:_,error:n}=await t.from("shared_vision_boards").insert({user_id:a.user.id,share_token:s,board_name:i.name,board_data:i.board_data||{},total_budget:((o=i.board_data)==null?void 0:o.totalBudget)||0,expires_at:h,view_count:0,creator_subscription_tier:c.tier,creator_id:a.user.id}).select().single();if(n)throw console.error("Error creating shared vision board:",n),new Error(`Failed to create shareable link: ${n.message}`);return{shareUrl:`${window.location.origin}/shared-visionboard/${s}`,shareToken:s}}catch(a){throw console.error("Error in createSharedVisionBoard:",a),new Error(a.message||"Failed to create shareable link")}}static async getSharedVisionBoard(e){try{const{data:r,error:o}=await t.from("shared_vision_boards").select("*, creator_subscription_tier, creator_id").eq("share_token",e).single();if(o){if(o.code==="PGRST116")return null;throw console.error("Error fetching shared vision board:",o),new Error(`Failed to fetch shared vision board: ${o.message}`)}return r.expires_at&&new Date(r.expires_at)<new Date?null:(await t.from("shared_vision_boards").update({view_count:r.view_count+1}).eq("share_token",e),{id:r.id,board_name:r.board_name,board_data:r.board_data||{items:[],totalBudget:0,createdAt:r.created_at},total_budget:r.total_budget,view_count:r.view_count+1,created_at:r.created_at,creator_subscription_tier:r.creator_subscription_tier,creator_id:r.creator_id})}catch(r){throw console.error("Error in getSharedVisionBoard:",r),new Error(r.message||"Failed to fetch shared vision board")}}static async getUserSharedVisionBoards(){try{const e=await this.ensureAuthenticated(),{data:r,error:o}=await t.from("shared_vision_boards").select("*").eq("user_id",e.user.id).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching user shared vision boards:",o),new Error(`Failed to fetch shared vision boards: ${o.message}`);return r||[]}catch(e){throw console.error("Error in getUserSharedVisionBoards:",e),new Error(e.message||"Failed to fetch shared vision boards")}}static async deleteSharedVisionBoard(e){try{const r=await this.ensureAuthenticated(),{error:o}=await t.from("shared_vision_boards").delete().eq("share_token",e).eq("user_id",r.user.id);if(o)throw console.error("Error deleting shared vision board:",o),new Error(`Failed to delete shared vision board: ${o.message}`)}catch(r){throw console.error("Error in deleteSharedVisionBoard:",r),new Error(r.message||"Failed to delete shared vision board")}}static async copyToClipboard(e){try{if(navigator.clipboard&&window.isSecureContext)await navigator.clipboard.writeText(e);else{const r=document.createElement("textarea");r.value=e,r.style.position="fixed",r.style.left="-999999px",r.style.top="-999999px",document.body.appendChild(r),r.focus(),r.select(),document.execCommand("copy"),r.remove()}}catch(r){throw console.error("Error copying to clipboard:",r),new Error("Failed to copy to clipboard")}}}export{g as V};
